// Code generated by go-bindata.
// sources:
// template.gotemplate
// DO NOT EDIT!

package tree

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5b\xdb\x8e\x1b\x37\xd2\xbe\x56\x3f\x45\x45\x80\x1d\x29\x96\x34\x87\xc4\xc1\x1f\x25\x0a\x90\x4c\x9c\x60\xe0\xc4\x30\x6c\xff\xb9\xc9\x06\x0b\x8e\xba\x7a\x44\x4c\xab\x5b\xdb\xa4\x66\xac\x55\x1a\x08\xf6\x7a\x2f\xfd\x84\x7e\x92\x05\x8b\x87\x26\xfb\xa0\x83\xc7\x71\x82\xdd\x5c\xc4\x23\x1e\x8a\x55\x1f\xab\x3e\x16\x0f\x7d\x72\x02\x17\xf9\x6a\x53\xf0\xeb\x85\x84\xc1\x7c\x08\xe7\xa7\x67\x8f\x47\xf0\x64\xc9\x0b\x78\xce\x04\x9f\x4f\xe0\x9b\x34\x05\xaa\x17\x50\xa0\xc0\xe2\x16\xe3\x49\x74\x72\x02\xdf\xc4\x6c\x25\x31\x86\x24\x2f\x60\x9e\xc7\x38\xbe\xc6\x0c\xae\x36\x50\x60\x1c\xe3\x7c\xa4\x24\x7d\xa1\xda\xfd\xbf\x40\xc8\x13\x90\x0b\x2e\x40\xe4\xeb\x62\x8e\xd4\x1c\xb8\x80\xeb\xfc\x16\x8b\x0c\x63\xd5\x8d\xc1\xb7\x2f\xbf\x1b\x0b\xb9\x49\x51\xf5\x4a\xf9\x1c\x33\x81\x20\x17\x4c\xc2\x9c\x65\x70\x85\x90\xe4\xeb\x2c\x06\x9e\x81\x5c\x20\xfc\x78\x79\xf1\xe4\xd9\xcb\x27\x90\xf0\x14\x49\x9f\xe7\x6c\x7e\xc3\xae\x51\x8d\x7f\x95\xb2\xf9\x8d\x2c\x10\x81\x2f\x57\x29\x2e\x31\x93\x02\x98\xaa\x19\x53\x15\xa8\x3a\xd5\xc9\xe8\x47\x0a\xbc\x2a\x10\x5f\xa2\x04\x96\xc5\xf4\xf7\x4f\x6c\x65\x9b\xbc\x94\xc5\x7a\x2e\xd7\x05\x29\x9d\xe5\x12\xe4\xa2\x40\x16\x83\x60\x89\x13\xf3\x02\x13\x2c\x30\x9b\xa3\x98\xc2\x42\xca\xd5\xf4\xe4\x04\xb3\xc9\x1d\xbf\xe1\x2b\x8c\x39\x9b\xe4\xc5\xf5\x89\xfa\x75\xf2\x02\xe3\x07\x4f\xce\x1f\xfc\xdf\xe9\x83\x2f\x3e\x25\x6d\xfe\xae\xb4\x89\x56\x46\xfd\xed\x76\x62\x2c\x29\xcb\x28\xe2\xcb\x55\x5e\x48\x18\x44\xbd\x7e\xb2\x94\xfd\x08\x00\x60\xbb\x1d\x43\xc1\xb2\x6b\x84\xc9\x25\x55\x8b\xb2\xa4\x8a\xfe\x76\x3b\x29\xcb\xaa\x11\x66\x71\x59\x46\xc3\x28\xda\x6e\x63\x4c\x78\x86\xd0\x9f\xe7\xcb\x15\x2b\x98\xcc\x8b\x7e\x59\x46\xaa\x11\x4f\x60\x72\x29\x9e\xe2\xe6\xd9\x7a\x59\x96\x91\x6e\x80\x30\x9d\xc1\x0d\x6e\x60\x0c\x59\x1e\xe3\xe4\x29\x6e\xa8\x31\xa6\x02\xa9\xc7\x85\x93\xd3\xe8\x33\xb9\x58\xae\x06\xb6\xd7\xd0\x75\x2b\xcb\xe8\x96\x29\x4f\xd1\x6d\x79\x26\x23\x71\xc7\xe5\x7c\x01\xdb\x68\xce\x04\xd2\x70\x5f\xbb\xe1\xa6\x64\x85\x6d\x3d\x83\xb3\xaa\xd1\x57\x9d\x8d\xc6\x67\x51\x8c\x09\x5b\xa7\xb2\x5e\x73\x1a\x69\x6b\x35\x24\xdb\xad\xfd\xb7\x89\xcb\x65\x76\xbb\x1f\x1a\xab\x00\x8c\x95\x46\x87\x41\x63\xfb\x10\x3e\x37\x47\x43\xd3\x6d\xf5\xd9\x21\xf8\x1d\x0b\xcd\xc9\x09\x05\x01\x2c\xf2\x34\x16\x80\x36\x88\x28\x90\xb1\x16\x49\x91\xdc\xac\xc8\x71\x5f\x6d\x56\xf8\x8c\x2d\xb1\x2c\x41\x50\xc8\xc0\x36\xea\xbd\xc8\x73\x09\xfa\xbf\x4f\x82\x36\xcf\xf2\x18\xa3\x9e\xe0\xff\x44\x53\xad\x0c\x2f\x23\x35\x74\xa3\x9d\x0a\x3c\x06\x82\x67\xd7\x29\x5a\x6d\xe0\x8e\xcb\x85\x61\x83\x0e\x35\xa8\x6b\xa5\x8a\x9a\x31\x8a\x0d\x85\x90\x6a\x55\x96\x51\xef\x67\x96\xae\x91\x0a\xe9\x2f\x5b\x3c\xcf\xd3\xbc\x00\xb8\xca\xf3\x14\x4e\x4e\x40\x5b\x3b\x06\x59\xac\x71\xa4\xec\x87\x31\x24\x2c\x15\x18\xf5\x7e\xc4\x44\x76\x18\xf7\x82\x78\xb5\xb5\xea\x39\x2b\x94\x0d\x2d\x55\x1a\x82\xcb\x4c\x48\x96\x49\xce\x24\x36\xb9\x2b\x4a\xd6\xd9\x1c\x9e\xe1\x5d\xd0\x7b\x30\xac\x89\x83\x2d\xcd\x75\x81\x72\x5d\x64\xf0\x30\xa8\xdb\x96\x66\xa0\xe7\x6b\x09\x3c\x13\x58\x48\x41\xde\xa3\xa6\x21\x77\xa0\x12\xb5\x2a\xdc\xc4\x22\x5f\xa7\x31\xb0\x78\x81\x05\x82\x69\x51\x85\xcd\xc7\x02\x08\x7e\x26\x94\x24\x9e\x67\x23\xc8\xe5\x02\x8b\x3b\x2e\x10\x96\x28\x17\x79\x0c\x2b\x96\xf1\xb9\x98\x68\xe5\x07\xc4\xcf\xa1\xbe\x43\xa5\x8c\x8a\x8d\x60\x8a\x46\x70\x4b\x53\x14\xce\xd0\x50\x4d\xa8\x0a\x1b\xad\x3b\xc6\x34\xd7\x6d\x48\xf3\x44\x5b\x42\x8e\x38\x9b\x41\xc6\x53\xd5\xb7\xe7\x15\xd6\xb0\x51\xfd\xb6\x2a\x88\x54\x50\x8d\x80\x46\x9d\x6a\x2d\x46\x40\x8e\x31\xd5\x93\x5f\x46\xbd\x5e\x30\xfe\xac\x1a\x2a\xea\x95\x9a\x14\xd4\x58\x04\xec\x34\xa8\xed\xa5\x79\xbe\xd2\x65\x6b\x8c\x7a\x3d\xb5\x8e\x52\x91\x9e\x34\xfb\xdf\x76\x2b\x71\xb9\x4a\x99\x0c\xd9\x1b\x26\xca\x49\x7b\x3d\x47\x14\xbd\x5e\x8f\x68\xc0\x05\xf6\x0c\x4e\xa7\xaa\xb4\xe7\xc8\x8a\xe8\xb9\x2a\xd2\x8e\x3f\xd3\x76\x51\xb1\x76\x94\x86\xa8\xaf\xac\x24\x9e\x68\x7e\x21\x8f\xf7\x90\xb4\x12\x75\xf9\x7d\xc0\xec\x35\xf0\x74\x82\x75\x2d\x21\x34\xb3\xa1\xd7\xeb\xf9\x20\x1b\x35\x1a\x9d\xca\x86\x45\x5f\xd7\x2d\xd2\x81\xda\x62\x92\xa9\xf8\x03\x6c\x22\xc9\x47\x1b\x55\xf5\x22\xd1\xea\x7f\x75\x27\x9c\x18\x6a\xd1\x3d\x22\x55\x4f\x6e\xa7\xdb\x5c\x30\x81\x67\x03\xbf\xfd\xd0\xd4\x2b\x26\x7e\xf4\xc8\xb0\xc2\x0f\x28\x41\x20\x2b\xe6\x0b\x14\x14\xea\x86\x1a\x1c\x31\xa8\x94\x49\x45\xaa\x4a\x97\xb4\xdf\x08\xe0\x52\x98\x58\xcd\x0b\x42\x92\x27\xd4\xc6\x64\x4d\x55\xfe\x66\x89\xe5\x25\xce\x73\xd7\x1f\x94\x6f\x2f\x51\x62\xa1\x3a\xa8\xa8\xb0\xfd\xef\x98\xd0\x9d\x7d\x52\x21\xb4\x3e\x30\x3d\xfd\x80\x4d\x7a\x1a\xc2\xa0\x8d\x9f\x46\xc6\x5c\xb5\x80\x10\x57\x05\x14\xf0\x63\x9e\xdf\xac\x4d\x1a\x60\x9d\x10\x3e\xaa\xdc\xcf\x20\x52\xc5\xe9\xc8\xd0\x44\x19\xb9\x3a\x9e\x8e\x8c\xcb\xe8\x29\x7b\x81\xcb\xfc\x56\xad\xcd\xf4\x8f\x9b\xb3\xa4\xc8\x97\xf5\x59\xfb\xc0\xb0\x69\xcd\x5a\x90\x33\x14\x3e\x5f\xf0\x34\x6e\xe5\xee\xfd\xa0\xcd\xea\xa0\x11\x46\x01\x53\x19\x5c\x1f\x3e\xf4\x63\xdd\x03\x7b\xa5\x96\xf3\xa9\xc7\x1a\x93\x25\x7b\xcd\x97\xeb\xa5\xd2\x61\x30\x8c\x02\x0a\x55\x8d\x29\x1f\xae\xb1\x28\x95\xff\x6c\xa8\xd4\x44\xac\x2a\x6b\xaa\x63\x34\xfe\xed\xb7\x0e\xea\xe9\xe6\x24\x8d\x53\x48\x6f\x3e\x55\x04\xf5\x96\x29\x4a\x4f\xa4\x4e\x6a\x66\x7a\xcd\xd1\x7d\xfc\x72\x6a\x74\xa1\xfe\x1e\x90\x28\x65\xba\xe6\x86\x18\x53\x94\xa8\xb9\x23\xd3\x9c\x41\x82\xa9\xb2\xc0\x55\xca\xe6\x48\x68\xa9\xca\x11\xb8\xde\x76\x60\x4b\x49\x6e\x26\xb4\xaa\x1f\xd5\x8d\x73\x9a\x98\x45\xb1\xac\xe8\x4b\xd1\xd3\x78\x6c\x7c\xfd\xc9\x72\x25\x37\x8e\x77\x2c\x57\x90\xf3\xc5\x39\x6a\xba\x99\xe7\x99\x64\x3c\x03\x96\x6d\x48\x09\xb1\xcb\x45\x49\xe0\x60\xa8\xf3\xbd\xad\x0b\x32\x37\x32\xad\xa7\x66\xf0\x97\xea\xb7\x1d\x3b\x5b\x2f\xaf\xb0\x50\x89\x31\x8d\xe1\x53\xe4\xce\x98\x50\x42\x06\x43\x95\x6c\xb5\x0d\x67\x46\x7a\x8a\x1b\xe1\x46\x62\x69\xaa\x62\x57\x0d\x31\xce\x8b\x18\x8b\x5d\xe2\x55\xcf\xc1\x10\x7e\xf9\xd5\x0f\x38\x35\x12\x49\x98\xce\x60\xc9\x6e\x70\x10\x56\x8f\xaa\xf1\x55\x80\x49\x17\x78\x97\x12\x89\x0e\x54\x2c\xa8\x34\x85\xab\x9a\xd3\x2f\x81\xcb\xc9\x33\x7c\x2d\x07\xc3\x2f\x81\x3f\x7a\x44\xd3\xa8\xc4\xff\xc2\x7f\x85\x99\xaa\x7c\x8a\x1b\xd5\xa5\xe2\x2c\x55\x6b\x4c\xa3\x50\x09\x8d\xbb\xd5\x45\xd6\x3c\xb8\x62\x6a\x6b\x9e\x6b\x40\x89\xb5\x76\x18\xac\xe5\x59\x93\x3d\x22\xd6\x24\x43\x92\x03\xb3\x03\xae\xbe\xbf\xe1\x7a\x08\x67\x3a\x49\x0f\x8d\xd7\x2d\x8c\xf9\xc4\x04\xce\x7f\x17\x08\x29\x26\x72\xbc\xcc\x85\x84\xc1\x92\x67\x43\x4d\x6e\xd5\x32\xaa\x4f\x33\x04\xa0\xf2\xd3\x9d\x40\x28\xc9\x8d\x9d\x00\x25\x1e\x86\x6d\x57\x9d\x3b\x8f\xde\x7c\x5d\x50\x5d\x98\xa9\xd2\x09\x8f\xa9\xf1\x69\xd3\xa6\x19\xa6\x2e\xea\xb9\xfe\xae\xcc\xb0\x54\x05\x82\xee\x64\x57\x2c\x62\x38\x1f\x05\x3a\x68\xb2\x30\xb0\xd7\xf7\x80\x81\x64\xff\x75\x70\x30\x6c\xdc\x01\xc4\xf7\x69\x9e\x17\xf0\x3d\xcf\x62\x01\x09\xfd\xad\xed\xd6\xbb\x6d\x9e\xad\xd6\x52\x67\x9a\x96\x27\x16\x18\xb4\x73\xf8\x64\xb9\x29\xe7\x26\x63\x3a\x34\xcd\xd2\xbd\x76\x27\x5a\x95\xa6\x99\xd9\x92\xeb\xe3\x93\x18\x98\xf1\x61\x56\x5c\xa3\x90\xba\x9a\x4e\xee\xb8\x00\xb1\x64\x69\x8a\x85\xfa\x9d\x29\x4d\xf1\x1f\x6b\x96\xda\x54\xe3\x9a\xdf\xa2\x49\x73\xe8\x4c\xd1\xb7\x6a\xc9\x36\xc4\xe3\xf6\xe4\x6f\x04\xc8\x95\x52\x70\x85\x73\xb6\x16\x58\x25\x35\xd6\x21\x46\x4a\xbe\xa9\x55\xe2\x14\xa9\x34\x58\x19\xd4\x06\x80\x34\x35\x3a\x35\xf5\xf8\xb0\xd9\x11\x41\xda\x96\x56\x6a\x2c\x9a\xfe\xd9\x48\x2d\xf5\x4f\xb7\x81\x68\xd9\x6c\x26\x16\x54\xe7\xb7\x87\xed\x2f\xbd\xed\x65\xfb\xee\xd2\x4b\x54\x6d\x8a\xda\xbe\x79\x6c\xd9\x99\xb5\x6e\xc9\xc8\x68\x6b\xe1\x2c\x14\xdc\xba\x13\x2a\x6d\x86\xa5\xbb\x78\xd9\xb3\x11\xb5\x37\x71\xbe\x40\x9e\xf2\xec\x1a\x12\x8a\xbf\xb9\xf9\xb5\x3f\x02\xc3\x96\x7e\x0c\xda\x9a\x63\xa3\xd0\xf6\xdb\x1f\x87\x17\xfe\xd8\xcd\x48\xd4\x41\x57\x0f\x45\xdf\xeb\xf7\x46\x62\x60\xdd\x1f\x19\x8b\x01\x41\xfc\xd9\xc1\x68\x70\x6d\x0b\x47\x0b\xc8\x7f\x49\x40\x1a\x73\x0e\x09\xb5\x5d\xf1\x7a\x5c\x48\xba\x41\xf7\x07\x65\x8a\xac\x30\x9b\x59\xe1\x79\x4f\xb0\x9d\xdd\x3d\x95\x4a\xc2\x80\xe6\xc3\x3f\xea\xcb\x78\xea\xed\x28\xc0\x4b\xeb\x65\xa1\xa6\xd7\x65\xa4\x20\x6c\xc1\xaa\x40\x81\x99\x64\xca\xad\x14\x25\x98\x9d\xc5\xee\x0c\x5c\x8b\x1b\x0c\xad\x98\x6d\xd4\x13\xb2\x50\x6e\xd0\x7f\x81\xf1\xb7\x29\x9b\xdf\xbc\x2a\x10\xff\x96\xf5\x09\xaa\x8f\x48\x25\xbb\x0d\x51\x90\xe5\x6b\xb9\x5a\xcb\x81\xd3\x7d\x04\xfd\xfe\xc8\x1c\x40\x3f\x14\xb2\x08\x92\x4b\x21\x0b\x65\x86\xd6\x27\x6b\x3f\x0a\x6d\xd5\xc9\x72\xe5\x52\x4e\x5e\xae\x0a\x9e\xc9\x64\xd0\x7f\x70\xdb\x1f\x41\x75\x85\x63\xe5\x1a\x85\x3a\xa4\x8f\xd4\x76\x37\xe1\xaf\x8d\xec\x11\x70\xf1\x8a\xf1\x94\x82\x62\xa4\x0a\xe1\x13\x5d\x43\xd6\x85\x9b\x5c\x2f\x9b\xca\xf0\xee\xb9\x96\x33\x9d\x19\x89\x7a\x1f\x69\xc4\xe9\x4d\xab\x6b\xf4\x68\x06\xfd\xb7\x6f\xfe\x05\x00\xfd\xda\x66\x38\x6c\x03\xb6\x45\x05\x6c\x35\xfe\x08\x5c\x63\xe3\x84\xa4\xb0\x06\x58\x69\xad\x44\x58\x5d\x42\x55\x6c\x6d\xff\xed\x9b\x37\x6f\xdf\xfc\xfe\xf6\xcd\xef\x6a\x18\x4f\x0f\xaf\xc1\xbf\xbd\x06\x95\x5c\x52\xc3\x4d\xcc\x23\xe8\x5b\x8f\x68\x1c\x60\xbc\x23\x3c\xb0\x17\x1c\x0f\xc0\x1a\x3c\x6a\xf8\x00\x1d\xed\x7e\x16\x1c\xe7\x71\xed\x3b\x11\x77\x5e\x53\xa3\xd2\xf6\x9c\xfc\x4f\x62\xc9\xfb\x26\x2c\xdd\x04\x58\x51\xdb\x01\xa1\x79\x5d\xb0\x2c\xd6\x9b\x82\xce\x5d\x4b\xed\xa0\xd0\x1e\x68\x99\xc3\x95\x8e\xe3\x43\x5d\x6b\xfe\x39\x5e\xaf\x75\x36\x4f\x71\xaf\x46\xb5\x33\xad\xf0\xb8\x27\x2c\xad\x55\xfa\xea\x2a\x66\xf6\xf4\xf3\xfa\x08\x7e\x45\xcb\xf2\xf0\x00\x8d\x5d\xdb\xfb\xe8\xdc\xa2\x96\xdf\xcf\x53\x8d\x22\xb4\x03\xf4\xc6\xae\xaf\xde\x71\x4f\x04\x15\xb9\x64\x12\x69\x47\xdf\x69\xae\xe2\x70\x22\xd1\x69\xe8\x84\x1d\x47\x73\xd4\x76\x18\x85\xb7\x1b\x54\x68\xbc\x9c\x27\xde\xcf\xc0\xa9\x5c\x69\xcb\x0d\x83\xd7\xc5\x96\x06\xa8\x6a\x99\x07\x99\xab\x77\xee\xbb\xec\x4d\xd5\x30\xd3\x20\x36\x3b\xac\x55\x2d\xad\xb1\x46\x39\x55\x64\x31\xe2\x89\xf7\xd3\xb7\xb5\x2a\x6d\xb1\xd5\xeb\xd2\x6e\x6b\x7a\xc0\xcc\x7a\xaa\xe6\xad\x87\xdf\x44\xbb\x5d\x08\xf0\x04\xf2\x34\x6e\xf1\xd9\x20\xd3\xc1\xbb\x60\x29\xd2\x9d\x54\xeb\xaa\x6f\xe5\xbe\xbd\x7a\xa1\x11\x10\xac\x1b\x5e\x1b\x07\x80\x6e\xe4\x42\x04\xef\x6a\xeb\x55\x85\x4b\xd5\x7b\xff\xe2\xe1\xdf\x56\xed\xf2\x85\xf6\x13\x66\x7b\xe7\x5a\x3b\x4f\xf6\x4c\xa9\x5d\x89\x9d\xdb\x63\xed\xc3\xf5\x3a\x3f\x44\x2f\x7d\x9a\xee\x69\x38\x0c\x8e\xdf\xbd\x2b\x8b\x9a\x42\x9f\x1a\x85\x0e\xd5\xe6\xd3\x9d\xda\x10\x8b\xbb\x90\x31\x9c\x5e\x53\x92\x4a\x49\x3d\x4a\x81\x2a\x0c\xcd\x84\xd7\x8e\xe6\xa9\x79\xbd\x90\xda\x07\x4b\x99\x6b\x61\x6f\x37\x1b\x77\x91\xcd\x3e\xc3\x5d\x33\xf5\xd9\xf1\x33\xf5\xd9\x4e\x6c\xbc\xa1\x1d\x42\x81\x3a\x9d\xd4\xaf\x43\xa0\xb6\x0c\xcf\x66\xfe\x5a\x5e\xc5\x97\x66\xa8\x90\xd0\xad\x4f\x44\x6d\xe9\x46\xe9\xde\x14\x75\x2e\x3b\xbb\x87\xd6\xea\xd5\xc6\xae\xd8\xb5\x63\xf0\x6a\xcd\xaa\x01\xff\xf8\x48\x8f\x7c\xbc\x13\xf5\x6e\xcf\x3a\x60\x3e\x7c\x2b\x6b\xfe\xf5\xee\x70\xb5\xcd\x94\x46\xcb\x6b\x35\xdc\x37\x2f\x87\xf8\x44\xeb\xc4\x90\x53\xd4\x46\x3a\x20\xdb\x09\xae\x2a\x0f\xcb\x78\x5a\x72\x1b\x9b\x68\xb7\xec\xc7\x5a\x5d\xc3\xcf\x9f\x77\xfb\x43\xfd\xe6\xf0\x78\x1e\xaf\x73\x64\x25\xf1\xfc\x20\x8f\xac\xb7\xef\xd2\xc0\xe4\x8d\xce\xe7\xaa\x9c\x33\xe4\x49\x53\x7e\x00\x53\x5a\xca\x33\x3d\xea\x64\xb9\x2f\xa1\xdc\x47\x19\xfe\xc2\xbc\x2f\xc2\xcb\x36\xfc\x0e\x5b\x63\xea\xed\xef\x8b\x5f\xeb\x62\xf8\xf0\xa1\xc1\xb0\x89\xf1\x8e\x7a\xc2\x6a\x6f\x23\x02\x24\x5c\x77\xeb\x33\x12\x2c\x4e\x75\x97\xad\x60\xac\xaf\x4a\x55\xcb\x83\x57\xa5\x7a\x97\xf7\x8d\xa6\xf6\xc8\xbf\x08\x9c\xdd\x24\xdf\x8d\xe4\xe3\xe3\x91\xdc\xbd\xd2\xec\x47\xb2\x63\xb1\xb8\x1f\x84\xbb\x26\xe2\x18\x0c\x7d\xc1\x75\x06\x69\x44\xbd\xd5\xf2\xd0\x55\xea\x9d\x4c\xac\x94\xdf\x69\x63\xe8\x4c\x87\x98\xa8\x37\x5c\xdd\x36\x12\x09\x7a\x26\x36\x08\xed\xf3\x23\x09\xed\xf3\x77\x75\x9c\xba\x25\xed\xf1\xb8\x2b\xcb\x39\x20\x4f\xd9\x8d\xfa\xf6\x58\xe0\x5a\xa9\xac\x6d\x65\xab\xfb\xf0\xf6\x58\x2f\xac\x8d\xe4\xa6\x23\x44\xa9\x15\x76\xfb\xfe\xa6\x3b\x65\x69\xdc\x1c\xb8\x6d\x9e\x1a\x47\xdf\x1d\xbc\xe3\x27\x2d\x1f\xea\x53\x95\xdd\x9f\xce\xc0\xe0\xfc\xf4\xec\x8b\xa1\x7e\x05\x6e\x1e\xa0\xd0\x3b\x7c\xe5\x8b\x74\x1b\x69\x0a\x3f\x16\x20\x14\xe8\x2d\x0f\xdf\x5d\xbf\xea\xf1\x3b\x85\x42\xf3\x15\xbe\x39\x77\xed\x7a\x9e\xbf\xca\x05\xa7\x6b\x8f\xab\x8d\x44\x7a\x08\x8f\xd7\x3c\x83\x19\x9c\x8e\xe0\x0a\xe5\x1d\xa2\xfa\x71\x36\x02\xa4\x3b\xa4\x73\x9a\x03\x5f\x71\xff\x3a\x85\x49\x4c\xd6\xa9\xd3\x1f\xee\x16\xb9\xc0\xea\xe3\x02\x56\xd0\x33\x9f\x13\xfd\x9c\x72\xc5\x78\xb1\xfb\xae\xae\x7a\x9d\xd3\x61\x7c\x75\xbd\xd1\x5a\xbf\x55\x52\xa7\x74\xde\xac\xaf\x3b\xa6\xfa\x1a\xca\xda\x3c\x85\x53\xfb\x48\xfe\x19\xbe\x96\xa0\xaf\xa2\xfc\x19\xb0\xd7\x90\x99\xaa\xb6\x9f\x25\xf8\x2f\x62\xdd\xcb\x34\xba\xb4\xbc\x63\x0a\x87\xa0\xb1\x71\x11\x77\xa3\x44\xfe\x71\x99\x80\x7e\x5e\x14\xc8\x19\xa9\x96\x59\xd0\xfd\x63\xe1\xde\xe0\x6a\xd0\x8c\xfb\x15\x28\x0b\x8e\xb7\xda\x5d\xe9\x15\x16\xb5\x31\x8f\x92\x6a\x63\x28\xad\xe6\x2c\x4d\x8d\x43\xd2\xdb\x12\x5e\x08\x09\x92\x2f\xed\xa0\x5c\xc2\x1d\x4f\x53\x58\xe5\x3c\x93\xad\x10\xe8\x2e\xce\xac\x44\x75\xc1\xd7\x5c\x48\x41\xc3\xfd\x94\xc7\x3c\xe1\x06\x3e\xf2\x04\x77\xb7\x6e\x04\xd9\xa9\x76\x82\x3f\x69\x9d\xb4\xa1\x55\xdb\x63\x0a\x27\xc2\x79\xeb\x6c\x06\xe7\x44\x1a\xd7\xb9\xcc\x95\x6f\xda\xe3\xa9\xd6\xa6\xa7\xee\xcc\x4f\x71\xbd\x6b\xa2\x1f\x9d\xd2\x73\x2a\x9d\xad\xa7\xf5\x77\xef\x95\x74\xfd\xcc\xd2\xf6\x34\x9b\xa6\x54\x5f\x1b\x50\x2b\x13\x2c\x0d\x3d\xda\x77\x5d\x75\x49\x2d\xcd\xcd\x27\x03\x61\x4d\xfd\xcc\x76\x8f\x20\xfb\x86\xf4\x20\x25\x9b\xd7\x0c\x99\xb9\xb1\x09\xda\xb5\xea\xd5\xec\xbb\x47\x33\x7b\x4c\x48\x2f\x0a\x1b\x63\x98\x07\xb8\xbd\xf6\x5b\xa0\xcb\xec\xd6\x7d\x1f\xc1\x93\xea\x62\xc7\x4e\x74\xdd\x58\xf7\x8c\xbe\x8c\x22\xcc\xe2\x69\xd4\xd0\x8d\xb6\xc9\x2d\xae\x03\xe7\xd5\x05\x2a\xe5\x32\x91\x11\x3a\x6d\x6f\x7e\x16\x05\xab\x98\xf9\x00\xa7\xc0\xdb\x1d\xdc\xb2\x2a\xf0\x96\xe7\x6b\x71\x30\xbf\x34\x3a\x74\x71\x8c\x1a\xb8\x9d\x63\xea\x22\xee\xc1\x33\xef\x31\xf0\x8d\xbe\xfb\x02\xff\xb4\x0a\x7c\x5a\xac\x76\x86\xfe\x79\x75\xb5\xd1\x8c\x7d\xf3\x86\x50\x07\x7f\xd1\x78\x8e\xed\x0f\xd1\x1a\xff\x85\x89\xd3\xfd\xb1\x55\x8f\xdb\x83\xc2\xb6\x19\x66\x0d\x1e\x39\x90\x48\xfe\x37\x08\xe0\xeb\x43\x08\x80\xe6\xf3\x18\x0a\x38\x7d\x0f\x14\xa0\x3f\x22\xf0\x1f\xc2\xda\x17\xa4\x55\x00\x52\xe0\x51\x48\x7d\x67\x5f\xb8\x2f\x55\x6c\x6d\xde\x43\x64\x99\x80\x85\xe6\xcb\x69\xa3\x6b\x08\xbe\xfe\xcc\xc1\x3d\x51\xdf\xa3\xb8\xfd\xde\xe4\xfd\xab\xad\x19\x87\x67\xf2\xf3\xcf\x3a\x75\x55\x8e\xa2\x35\xfd\x96\x32\x57\x95\xf0\xcb\x26\xd3\x72\x29\x80\x67\x5c\x72\x96\x1a\xa5\x06\x79\x86\xe3\x2b\x4c\xf2\x02\xc7\x94\xdc\x0c\x69\x6b\xc1\xd2\xd4\x66\x20\x32\x87\x04\xe5\x7c\xd1\x9e\xff\xb0\x6c\x73\xb0\x21\xa4\x9a\x7e\xf6\x73\x84\xdf\x99\x4f\x21\xb2\xb8\x6d\xf5\x58\x31\x21\xcd\xa3\x5c\x4f\x2f\x32\x4a\x55\x8d\xe5\x02\xc7\x98\xc5\x9a\xa4\xc9\x2a\x43\xaf\x81\x55\x41\xe7\x23\x8d\x7a\x92\xc5\x47\x9a\x74\x6e\x9f\x43\x13\x96\xdd\x4b\x62\x88\xf5\xbe\xf5\xb0\x36\x33\x1d\x8b\x21\x8d\xd9\xbe\x1a\x06\x02\xfe\xd0\xa5\xf0\x50\x68\xad\xb2\x6e\x29\xb4\x60\x1a\x47\x6a\xc6\x82\x76\x59\xfb\xf1\x01\xdb\x09\x6f\x30\xe9\xfb\xd0\x0d\x3d\xa4\x03\x5c\x35\x60\x3b\xb6\x7e\xf7\xbf\x46\x96\x61\x74\x6d\x40\x4b\xee\xdc\x04\x56\x47\x4d\x54\x46\xff\x09\x00\x00\xff\xff\xa2\xeb\x42\xee\x4b\x43\x00\x00")

func templateGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templateGotemplate,
		"template.gotemplate",
	)
}

func templateGotemplate() (*asset, error) {
	bytes, err := templateGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.gotemplate", size: 17227, mode: os.FileMode(420), modTime: time.Unix(1552909953, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.gotemplate": templateGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template.gotemplate": &bintree{templateGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
