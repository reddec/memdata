// Code generated by go-bindata.
// sources:
// template.gotemplate
// DO NOT EDIT!

package tree

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5f\x8f\xdb\x36\x12\x7f\xb6\x3e\xc5\xd4\x40\x72\x76\xe3\xf5\x26\x69\x53\x5c\xdd\xba\x40\xbb\x97\x16\x41\x7a\x41\xb0\x9b\xeb\x4b\xaf\x38\x70\xa5\xd1\x9a\x58\x59\xf2\x89\xf4\x6e\x7c\xae\x80\xe2\x9e\xef\x31\x9f\x30\x9f\xe4\x30\x43\x52\x22\x65\xc9\xf6\x66\xaf\x7f\x70\x7d\x68\x62\x72\x66\x38\xf3\xe3\xcc\x8f\x43\x2a\xa7\xa7\x70\x56\xac\x36\xa5\xbc\x5a\x68\x18\xc5\x63\x78\xfa\xf8\xc9\xb3\x09\x3c\x5f\xca\x12\x5e\x0b\x25\xe3\x29\x7c\x9d\x65\xc0\xf3\x0a\x4a\x54\x58\xde\x60\x32\x8d\x4e\x4f\xe1\xeb\x44\xac\x34\x26\x90\x16\x25\xc4\x45\x82\x27\x57\x98\xc3\xe5\x06\x4a\x4c\x12\x8c\x27\x64\xe9\x73\x92\xfb\x9b\x42\x28\x52\xd0\x0b\xa9\x40\x15\xeb\x32\x46\x16\x07\xa9\xe0\xaa\xb8\xc1\x32\xc7\x84\xd4\x04\x7c\x73\xf1\x97\x13\xa5\x37\x19\x92\x56\x26\x63\xcc\x15\x82\x5e\x08\x0d\xb1\xc8\xe1\x12\x21\x2d\xd6\x79\x02\x32\x07\xbd\x40\xf8\xfe\xc5\xd9\xf3\x57\x17\xcf\x21\x95\x19\xb2\x3f\xaf\x45\x7c\x2d\xae\x90\xd6\xbf\xcc\x44\x7c\xad\x4b\x44\x90\xcb\x55\x86\x4b\xcc\xb5\x02\x41\x33\x27\x3c\x05\x34\x47\x4a\xd6\x3f\x76\xe0\x4d\x89\x78\x81\x1a\x44\x9e\xf0\xdf\xff\x2a\x56\x4e\xe4\x42\x97\xeb\x58\xaf\x4b\x76\x3a\x2f\x34\xe8\x45\x89\x22\x01\x25\xd2\xda\xcc\x39\xa6\x58\x62\x1e\xa3\x9a\xc1\x42\xeb\xd5\xec\xf4\x14\xf3\xe9\xad\xbc\x96\x2b\x4c\xa4\x98\x16\xe5\xd5\x29\xfd\x3a\x3d\xc7\xe4\xc1\xf3\xa7\x0f\xfe\xfc\xf8\xc1\xe7\x9f\xb0\x37\xff\x20\x6f\xa2\x95\x75\x7f\xbb\x9d\xda\x48\xaa\x2a\x8a\xe4\x72\x55\x94\x1a\x46\xd1\x60\x98\x2e\xf5\x30\x02\x00\xd8\x6e\x4f\xa0\x14\xf9\x15\xc2\xf4\x05\x4f\xab\xaa\xe2\x89\xe1\x76\x3b\xad\xaa\x46\x08\xf3\xa4\xaa\xa2\x71\x14\x6d\xb7\x09\xa6\x32\x47\x18\xc6\xc5\x72\x25\x4a\xa1\x8b\x72\x58\x55\x11\x09\xc9\x14\xa6\x2f\xd4\x4b\xdc\xbc\x5a\x2f\xab\x2a\x32\x02\x08\xb3\x39\x5c\xe3\x06\x4e\x20\x2f\x12\x9c\xbe\xc4\x0d\x0b\x63\xa6\x90\x35\xce\x6a\x3b\x3b\x3a\xd3\xb3\xe5\x6a\xe4\xb4\xc6\xb5\x5a\x55\x45\x37\x82\x32\xc5\xc8\xca\x5c\x47\xea\x56\xea\x78\x01\xdb\x28\x16\x0a\x79\xb9\xaf\xea\xe5\x66\x1c\x85\x93\x9e\xc3\x93\x46\xe8\xcb\x5e\xa1\x93\x27\x51\x82\xa9\x58\x67\xba\x3d\xf3\x38\x32\xd1\x1a\x48\xb6\x5b\xf3\x27\xed\x1b\x6d\x35\x2c\x8a\x2c\x51\x80\x2e\x55\x38\x5d\xb1\x95\x2f\x91\xde\xac\x78\x7b\xde\x6c\x56\xf8\x4a\x2c\xb1\xaa\x40\x71\x62\xc0\x36\x1a\x9c\x17\x85\x06\xf3\xdf\xc7\x81\xcc\xab\x22\xc1\x68\xa0\xe4\xbf\xd0\x4e\x53\xe4\x66\xe9\x1d\x39\x4a\x2f\x01\x4a\xe6\x57\x19\x3a\x6f\xe0\x56\xea\x85\xcd\xf9\x1e\x37\x58\xb5\x71\xe5\x25\x6e\x4c\x06\x10\x44\x24\x55\x55\xd1\xe0\x07\x91\xad\x91\x07\xf9\x6f\x6e\x38\x2e\xb2\xa2\x04\xb8\x2c\x8a\x0c\x4e\x4f\xc1\x44\x7b\x02\xba\x5c\xe3\x84\xe2\x87\x13\x48\x45\xa6\x30\x1a\x7c\x8f\xa9\xee\x09\xee\x9c\xd9\xa3\x73\xea\xb5\x28\x29\x86\x8e\x29\x03\xc1\x8b\x5c\x69\x91\x6b\x29\x34\xee\x56\x68\x94\xae\xf3\x18\x5e\xe1\x6d\xa0\x3d\x1a\xb7\xcc\xc1\x96\x37\xbb\x44\xbd\x2e\x73\x78\x18\xcc\x6d\x2b\xbb\xd0\xeb\xb5\x06\x99\x2b\x2c\xb5\xe2\xf4\xa1\x6d\x28\x6a\x50\x99\x40\x08\x37\xb5\x28\xd6\x59\x02\x22\x59\x60\x89\x60\x25\x9a\xa2\xf9\x93\x02\x86\x5f\x28\xb2\x24\x8b\x7c\x02\x85\x5e\x60\x79\x2b\x15\xc2\x12\xf5\xa2\x48\x60\x25\x72\x19\xab\xa9\x71\x7e\xc4\x2c\x14\xfa\x3b\x26\x67\x46\x94\xc9\xfe\x16\x4d\xe0\x86\xb7\x28\xdc\xa1\x31\x6d\x28\xd5\x8d\xf1\x1d\x13\xde\xeb\x2e\xa4\x65\x6a\x22\xe1\x44\x9c\xcf\x21\x97\x19\xe9\x0e\x88\xa9\xd9\x5b\xae\x1d\xc9\xc9\xbd\x1b\x10\x91\xb8\xcc\xa5\x96\x22\x33\xd0\x0f\x06\x6c\xad\xa9\x73\x72\x78\x42\x36\xc6\x6e\xce\xac\xd4\x02\x9c\x9c\xd9\x52\x69\x02\xcb\x73\x28\x33\x13\xda\x04\x38\xdb\x66\x26\xa3\xaa\x68\x30\x08\x82\x9a\x37\xfe\x47\x83\xca\x50\x0d\x05\xc0\xbb\x35\x0b\x66\x07\x59\x51\xac\xcc\xd8\x9a\x5c\x25\xef\x79\xc8\x64\x82\xfb\x6f\xbb\xd5\xb8\x5c\x65\x42\x87\xc4\x07\x53\xca\xfc\xc1\xa0\xa6\x9f\xc1\x60\xc0\xe4\x52\xd3\xc5\x1c\x1e\xcf\x68\x74\xe0\x88\x06\x98\xd9\x9a\x21\x53\x4d\x73\x13\x17\x0f\x9b\xec\xdb\x31\xf5\xa5\xb3\x24\x53\xc3\x5a\x5c\x46\xde\xf6\x38\x8b\x66\xfc\x3e\x60\x0e\x76\xf0\xac\x0d\x9b\x59\x46\x68\xee\xea\x79\x30\xf0\x41\xb6\x6e\xec\x28\x55\x3b\x11\x7d\xd5\x8e\xc8\x54\x7f\x47\x48\x76\xe2\x57\x88\x89\x2d\xdf\x39\xa8\x46\x8b\x4d\xd3\xff\xda\x49\x38\xb5\x7c\x65\x34\x22\x9a\xe7\xb4\x33\x32\x67\x42\xe1\x93\x91\x2f\x3f\xb6\xf3\x44\xef\x8f\x1e\x59\xaa\xf9\x0e\x35\x28\x14\x65\xbc\x40\xc5\xfc\x61\xf9\xa6\x66\x1b\xea\x36\xa8\x18\xa9\xd3\x30\x79\xa3\x40\x6a\x65\x09\xa0\x28\x19\x49\x99\xba\x82\xa5\x86\xa3\x69\x7d\x1c\x5b\x5d\x60\x5c\xd4\xfa\x40\xb9\xbd\x44\x8d\x25\x29\x50\x55\x38\xfd\x5b\xa1\x8c\xb2\xcf\x54\x8c\xd6\x6f\xcc\x79\xdf\xe1\x2e\xe7\x8d\x61\xd4\x45\x7a\x13\x1b\x2e\x9d\x4a\x4c\x80\x01\x05\x7c\x5f\x14\xd7\xeb\xd5\xc8\x30\x91\x4d\x42\xf8\xa8\x49\x3f\x8b\x48\x53\xa7\x13\x4b\x13\x55\x54\xcf\xc9\x6c\x62\x53\xc6\x6c\xd9\x39\x2e\x8b\x1b\x3a\xf0\xf9\x8f\x7a\xcf\xd2\xb2\x58\xb6\x77\xed\x37\x86\xcd\x78\xd6\x81\x9c\x3d\x17\xe2\x85\xcc\x92\xce\x03\xe1\x30\x68\xf3\x36\x68\x8c\x51\xc0\x54\x16\xd7\x87\x0f\xfd\x5a\xf7\xc0\x5e\x51\x8f\x30\xf3\x58\x63\xba\x14\x6f\xe5\x72\xbd\x24\x1f\x46\xe3\x28\xa0\x50\x12\xe6\x56\xb2\xc5\xa2\x3c\xfe\x83\xa5\x52\x5b\xb1\x34\xb6\xeb\x8e\xf5\xf8\xe7\x9f\x7b\xa8\xa7\x9f\x93\x0c\x4e\x21\xbd\xf9\x54\x11\xcc\x3b\xa6\xa8\x3c\x93\xa6\x53\x9a\x9b\x33\xc7\xe8\xf8\xe3\x2c\x74\x46\x7f\x1f\xb1\x29\x0a\xdd\x70\x43\x82\x19\x6a\x34\xdc\x91\x1b\xce\x60\xc3\x3c\x59\xe2\x2a\x13\x31\x32\x5a\x34\x39\x81\x5a\xdb\x2d\xec\x28\xa9\xde\x09\xe3\xea\x47\xed\xe0\x6a\x4f\xec\xa1\x58\x35\xf4\x45\xf4\x74\x72\x62\x73\xfd\xf9\x72\xa5\x37\x35\xef\x38\xae\xe0\xe4\x4b\x0a\x34\x74\x13\x17\xb9\x16\x32\x07\x91\x6f\xd8\x09\xb5\x2f\x45\xd9\xe0\x68\x6c\x9a\xc8\x6d\x5d\x64\xf5\xca\x7c\x9e\xda\xc5\x2f\xe8\xb7\x5b\x3b\x5f\x2f\x2f\xb1\xa4\x86\x84\xd7\xf0\x29\x72\x6f\x4d\x90\x91\xd1\x98\x3a\xb8\xae\xe5\xec\x4a\x2f\x71\xa3\xea\x95\x44\x96\x51\xed\xd2\x12\x27\x45\x99\x60\xb9\xcf\x3c\x69\x8e\xc6\xf0\xe3\x4f\x7e\xc1\xd1\x4a\x6c\x61\x36\x87\xa5\xb8\xc6\x51\x38\x3d\x69\xd6\xa7\x02\xd3\x75\xe1\xbd\xd0\x68\xda\xa7\x71\xc4\x6d\x8a\xa4\x99\xc7\x5f\x80\xd4\xd3\x57\xf8\x56\x8f\xc6\x5f\x80\x7c\xf4\x88\xb7\x91\xcc\xff\x28\x7f\x82\x39\x4d\xbe\xc4\x0d\xa9\x34\x9c\x45\xb3\x36\x34\x2e\x95\x30\xb8\x1b\x33\xe4\xc2\x83\x4b\x41\xb7\xda\xc2\x00\xca\xac\xb5\x27\x60\x63\xcf\x85\xec\x11\xb1\x21\x19\xb6\x1c\x84\x1d\x70\xf5\xfd\x03\x37\x4b\xd4\xa1\xb3\xf5\x30\x78\x23\x61\xc3\x67\x26\xa8\xf3\x77\x81\x90\x61\xaa\x4f\x96\x85\xd2\x30\x5a\xca\x7c\x6c\xc8\xad\x39\x46\xcd\x43\x80\x02\xa4\x3c\xdd\x0b\x04\x59\xde\xb9\x5e\x70\xe3\x61\xd9\x76\xd5\x7b\x9d\x19\xc4\xeb\x92\xe7\xc2\x4e\x95\x1f\x47\xec\x8c\x4f\x9b\xae\xcd\xb0\x73\xd1\xa0\xd6\xaf\xc7\x2c\x4b\x35\x20\x18\x25\x77\x62\x31\xc3\xf9\x28\xf0\x1b\x8d\x83\x41\xbc\xbd\x07\x0c\x6c\xfb\x8f\x83\x83\x65\xe3\x1e\x20\xbe\xcd\x8a\xa2\x84\x6f\x65\x9e\x28\x48\xf9\xef\x26\x6e\x73\x85\x97\xf9\x6a\xad\x4d\xa7\xe9\x78\x62\x81\x81\x5c\x8d\x4f\x5e\xd8\x71\x69\x3b\xa6\x63\xdb\x2c\xa3\xb5\xbf\xd1\x6a\x3c\xcd\xed\x3d\xdf\xbc\xc8\x24\x20\x6c\x0e\x8b\xf2\x0a\x95\x36\xd3\xfc\xe8\x25\x15\xa8\xa5\xc8\x32\x2c\xe9\x77\x4e\x9e\xe2\x3f\xd7\x74\x3f\x33\xad\xc6\x95\xbc\x41\xdb\xe6\xf0\x73\x9c\x1f\xd5\x52\x6c\x98\xc7\xdd\xa3\xd9\x04\x50\x92\x53\x70\x89\xb1\x58\x2b\x6c\x9a\x1a\x97\x10\x13\xb2\x6f\x67\xc9\x1c\x91\xca\x0e\x2b\x03\x5d\x00\xd8\x53\xeb\xd3\xae\x1f\xbf\x6d\x77\xc4\x90\x76\xb5\x95\x06\x8b\xdd\xfc\xdc\x69\x2d\xcd\xcf\xfa\x02\xd1\x71\xd9\x4c\x1d\xa8\x75\xde\x1e\x77\xbf\xf4\xae\x97\xdd\xb7\x4b\xaf\x51\x75\x2d\x6a\xf7\xe5\xb1\xe3\x66\xd6\x79\x25\xe3\xa0\x5d\x84\xf3\xd0\x70\xe7\x4d\xa8\x72\x1d\x96\x51\xf1\xba\x67\x6b\xea\x60\xe3\x7c\x86\x32\x93\xf9\x15\xa4\x5c\x7f\xb1\xfd\x75\xb8\x02\x43\x49\xbf\x06\xdd\xcc\x5d\xab\xd0\xe9\x1d\xae\xc3\x33\x7f\xed\xdd\x4a\x34\x45\xd7\x2e\x45\x3f\xeb\x0f\x56\x62\x10\xdd\xaf\x59\x8b\x01\x41\xfc\xde\xc5\x68\x71\xed\x2a\x47\x07\xc8\xff\x49\x41\xda\x70\x8e\x29\xb5\x7d\xf5\x7a\xb7\x92\xac\x17\x3d\x5c\x94\x19\x8a\xd2\x5e\x66\x95\x97\x3d\xc1\x75\x76\xff\x56\x92\x85\x11\xef\x87\xff\xd4\x97\xcb\xcc\xbb\x51\x80\xd7\xd6\xeb\x92\xb6\xb7\xee\x48\x41\xb9\x81\x55\x89\x0a\x73\x2d\x28\xad\xcc\xd3\x23\xdf\x2c\xf6\x77\xe0\xc6\xdc\x68\xec\xcc\x6c\xa3\x81\xd2\x25\xa5\xc1\xf0\x1c\x93\x6f\x32\x11\x5f\xbf\x29\x11\xff\x9e\x0f\x19\xaa\x8f\xd8\x25\x77\x0d\x21\xc8\x8a\xb5\x5e\xad\xf5\xa8\xf6\x7d\x02\xc3\xe1\xc4\xbe\x6a\x3f\x54\xba\x0c\x9a\x4b\xa5\x4b\x0a\xc3\xf8\x93\x77\xbf\xaf\x76\xfa\xe4\xb8\x72\xa9\xa7\x17\xab\x52\xe6\x3a\x1d\x0d\x1f\xdc\x0c\x27\xd0\x7c\xfd\x70\x76\xad\x43\x3d\xd6\x27\x74\xdd\x4d\xe5\x5b\x6b\x7b\x02\x52\xbd\x11\x32\xe3\xa2\x98\xd0\x20\x7c\x6c\x66\x38\xba\xf0\x92\xeb\x75\x53\x39\xde\xbe\x36\x76\x66\x73\x6b\xd1\xdc\x23\xad\x39\x73\x69\xad\x85\x1e\xcd\x61\xf8\xfe\xdd\xbf\x01\x60\xd8\xba\x0c\x87\x32\xe0\x24\x1a\x60\x9b\xf5\x27\x50\x0b\xdb\x24\x64\x87\x0d\xc0\xe4\x35\x99\x70\xbe\x84\xae\xb8\xd9\xe1\xfb\x77\xef\xde\xbf\xfb\xe5\xfd\xbb\x5f\x68\x19\xcf\x0f\x4f\xe0\x3f\x9e\x40\x63\x97\xdd\xa8\x37\xe6\x11\x0c\x5d\x46\xec\x3c\x60\x7c\x20\x3c\x70\x10\x1c\x0f\xc0\x16\x3c\xb4\x7c\x80\x8e\x49\x3f\x07\x4e\x9d\x71\xdd\x37\x91\xfa\xbd\xa6\x45\xa5\xdd\x3d\xf9\xef\xc4\x92\xf7\x6d\x58\xfa\x09\xb0\xa1\xb6\x23\x4a\xf3\xaa\x14\x79\x62\x2e\x05\xbd\xb7\x96\xd6\x43\xa1\x7b\xd0\xb2\x8f\x2b\x3d\xcf\x87\x66\xd6\xfe\x71\x77\xbf\xd6\x79\x9c\xe1\x41\x8f\x5a\x6f\x5a\xe1\x73\x4f\x38\xda\x9a\xf4\xdd\x25\x66\xf6\xfc\xf3\x74\x94\xbc\xe4\x63\x79\x7c\x84\xc7\xb5\xec\x7d\x7c\xee\x70\xcb\xd7\xf3\x5c\xe3\x0a\xed\x01\x7d\xe7\xd6\xd7\x56\x3c\x50\x41\x65\xa1\x85\x46\xbe\xd1\xf7\x86\x4b\x1c\xce\x24\x3a\x0b\x93\xb0\xe7\x69\x8e\x65\xc7\x51\xf8\x75\x83\x07\x6d\x96\xcb\xd4\xfb\x19\x24\x55\x3d\xda\xf1\x85\xc1\x53\x71\xa3\x01\xaa\xc6\xe6\x51\xe1\x9a\x9b\xfb\xbe\x78\x33\x5a\x66\x16\xd4\x66\x4f\xb4\x24\xe9\x82\xb5\xce\xd1\x90\xc3\x48\xa6\xde\x4f\x3f\xd6\x66\xb4\x23\x56\x4f\xa5\x3b\xd6\xec\x88\x9d\xf5\x5c\x2d\x3a\x1f\xbf\x99\x76\xfb\x10\x90\x29\x14\x59\xd2\x91\xb3\x41\xa7\x83\xb7\xc1\x51\x64\x94\x48\xba\xd1\x6d\xd2\x77\xd0\x1e\xb4\x06\x82\x73\xc3\x93\xa9\x01\x30\x42\x75\x89\xe0\x6d\xeb\xbc\x6a\x70\x69\xb4\x0f\x1f\x1e\xfe\xd7\xaa\x7d\xb9\xd0\xfd\xc2\xec\xbe\xb9\xb6\xde\x93\xbd\x50\x5a\x9f\xc4\x9e\xba\x67\xed\xe3\xfd\x7a\x7a\x8c\x5f\xe6\x35\xdd\xf3\x70\x1c\x3c\xbf\x7b\x9f\x2c\x5a\x0e\x7d\x62\x1d\x3a\xd6\x9b\x4f\xf6\x7a\xc3\x2c\x5e\x97\x8c\xe5\xf4\x96\x93\x3c\xca\xee\x71\x0b\xd4\x60\x68\x37\xbc\xf5\x34\xcf\xe2\xed\x41\x96\x0f\x8e\xb2\x5a\xc2\x7d\xdd\xdc\xf9\x16\xb9\xab\x33\xde\xb7\x53\x9f\xde\x7d\xa7\x3e\xdd\x8b\x8d\xb7\x74\x8d\x50\xe0\x4e\x2f\xf5\x9b\x12\x68\x1d\xc3\xf3\xb9\x7f\x96\x37\xf5\x65\x18\x2a\x24\x74\x97\x13\x51\x57\xbb\x51\xd5\xff\x52\xa9\xf7\xd8\xd9\xbf\xb4\x71\xaf\xb5\x76\xc3\xae\x3d\x8b\x37\x67\x56\x0b\xf8\x67\x77\xcc\xc8\x67\x7b\x51\xef\xcf\xac\x23\xf6\xc3\x8f\xb2\x95\x5f\x1f\x0e\x57\xd7\x4e\x19\xb4\x3c\xa9\xf1\xa1\x7d\x39\x26\x27\x3a\x37\x86\x93\xa2\xb5\xd2\x11\xdd\x4e\xf0\xa9\xf2\xb8\x8e\xa7\xa3\xb7\x71\x8d\x76\xc7\x7d\xac\x33\x35\xfc\xfe\x79\x7f\x3e\xb4\xbf\x1c\xde\x9d\xc7\xdb\x1c\xd9\x58\x7c\x7a\x54\x46\xb6\xe5\xfb\x3c\xb0\x7d\x63\x9d\x73\x4d\xcf\x19\xf2\xa4\x1d\x3f\x82\x29\x1d\xe5\x59\x8d\x36\x59\x1e\x6a\x28\x0f\x51\x86\x7f\x30\x1f\xaa\xf0\xaa\x0b\xbf\xe3\xce\x98\xb6\xfc\x7d\xf1\xeb\x3c\x0c\x1f\x3e\xb4\x18\xee\x62\xbc\x67\x9e\xb1\x3a\x28\xc4\x80\x84\xe7\x6e\x7b\x47\x82\xc3\xa9\x9d\xb2\x0d\x8c\xed\x53\xa9\x91\x3c\xfa\x54\x6a\xab\xfc\xaf\xd1\x34\x19\xf9\x07\x81\xb3\x9f\xe4\xfb\x91\x7c\x76\x77\x24\xf7\x9f\x34\x87\x91\xec\x39\x2c\xee\x07\xe1\xbe\x8d\xb8\x0b\x86\xbe\xe1\x36\x83\xec\x54\xbd\xf3\xf2\xd8\x53\xea\x83\x42\x6c\x9c\xdf\x1b\x63\x98\x4c\xc7\x84\x68\x2e\x5c\xfd\x31\x32\x09\x7a\x21\xee\x10\xda\x67\x77\x24\xb4\xcf\x3e\x34\x71\xda\x91\x74\xd7\xe3\xbe\x2e\xe7\x88\x3e\x65\x3f\xea\xdb\xbb\x02\xd7\x49\x65\x5d\x27\x5b\x3b\x87\xb7\x77\xcd\xc2\xd6\x4a\xf5\x76\x84\x28\x75\xc2\xee\xfe\xfd\x4d\x7f\xcb\xb2\xf3\xe5\xa0\xbe\xe6\x45\x55\xf4\xdf\x00\x00\x00\xff\xff\x2f\x7f\x42\xf5\x0b\x32\x00\x00")

func templateGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templateGotemplate,
		"template.gotemplate",
	)
}

func templateGotemplate() (*asset, error) {
	bytes, err := templateGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.gotemplate", size: 12811, mode: os.FileMode(420), modTime: time.Unix(1552635414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.gotemplate": templateGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template.gotemplate": &bintree{templateGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
