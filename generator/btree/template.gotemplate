// Copyright (c) 2015, Emir Pasic. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
// Adapted for code-generation by reddec 2019

// Package btree implements a B tree.
//
// According to Knuth's definition, a B-tree of order m is a tree which satisfies the following properties:
// - Every node has at most m children.
// - Every non-leaf node (except root) has at least ⌈m/2⌉ children.
// - The root has at least two children if it is not a leaf node.
// - A non-leaf node with k children contains k−1 keys.
// - All leaves appear in the same level
//
// Structure is not thread safe.
//
// References: https://en.wikipedia.org/wiki/B-tree
package {{.Package}}

import (
	"bytes"
	"fmt"
	"strings"
{{- range .Imports}}
    "{{.}}"
{{- end}}
)

// Tree holds elements of the B-tree
type {{.TypeName}} struct {
	Root       *{{.TypeName}}Node            // Root node
	size       int              // Total number of keys in the tree
	m          int              // order (maximum number of children)
}

// Node is a single element within the tree
type {{.TypeName}}Node struct {
	Parent   *{{.TypeName}}Node
	Entries  []*{{.TypeName}}Entry // Contained keys in node
	Children []*{{.TypeName}}Node  // Children nodes
}

// Entry represents the key-value pair contained within nodes
type {{.TypeName}}Entry struct {
	Key   {{.KeyType}}
	Value {{.ValueType}}
}


func New{{.TypeName}}(order int) *{{.TypeName}} {
    if order < 3 {
        panic("Invalid order, should be at least 3")
    }
	return  &{{.TypeName}}{m: order}
}

// Put inserts key-value pair node into the tree.
// If key already exists, then its value is updated with the new value.
// Key should adhere to the comparator's type assertion, otherwise method panics.
func (tree *{{.TypeName}}) Put(key {{.KeyType}}, value {{.ValueType}}) {
	entry := &{{.TypeName}}Entry{Key: key, Value: value}

	if tree.Root == nil {
		tree.Root = &{{.TypeName}}Node{Entries: []*{{.TypeName}}Entry{entry}, Children: []*{{.TypeName}}Node{}}
		tree.size++
		return
	}

	if tree.insert(tree.Root, entry) {
		tree.size++
	}
}

// Get searches the node in the tree by key and returns its value or nil if key is not found in tree.
// Second return parameter is true if key was found, otherwise false.
// Key should adhere to the comparator's type assertion, otherwise method panics.
func (tree *{{.TypeName}}) Get(key {{.KeyType}}) (value {{.ValueType}}, found bool) {
	node, index, found := tree.searchRecursively(tree.Root, key)
	if found {
		return node.Entries[index].Value, true
	}
	return nil, false
}

// Remove remove the node from the tree by key.
// Key should adhere to the comparator's type assertion, otherwise method panics.
func (tree *{{.TypeName}}) Remove(key {{.KeyType}}) {
	node, index, found := tree.searchRecursively(tree.Root, key)
	if found {
		tree.delete(node, index)
		tree.size--
	}
}

// Empty returns true if tree does not contain any nodes
func (tree *{{.TypeName}}) Empty() bool {
	return tree.size == 0
}

// Size returns number of nodes in the tree.
func (tree *{{.TypeName}}) Size() int {
	return tree.size
}

// Keys returns all keys in-order
func (tree *{{.TypeName}}) Keys() []{{.KeyType}} {
	keys := make([]{{.KeyType}}, tree.size)
	it := tree.Iterator()
	for i := 0; it.Next(); i++ {
		keys[i] = it.Key()
	}
	return keys
}

// Values returns all values in-order based on the key.
func (tree *{{.TypeName}}) Values() []{{.ValueType}} {
	values := make([]{{.ValueType}}, tree.size)
	it := tree.Iterator()
	for i := 0; it.Next(); i++ {
		values[i] = it.Value()
	}
	return values
}

// Clear removes all nodes from the tree.
func (tree *{{.TypeName}}) Clear() {
	tree.Root = nil
	tree.size = 0
}

// Height returns the height of the tree.
func (tree *{{.TypeName}}) Height() int {
	return tree.Root.height()
}

// Left returns the left-most (min) node or nil if tree is empty.
func (tree *{{.TypeName}}) Left() *{{.TypeName}}Node {
	return tree.left(tree.Root)
}

// LeftKey returns the left-most (min) key or nil if tree is empty.
func (tree *{{.TypeName}}) LeftKey() (result {{.KeyType}}) {
	if left := tree.Left(); left != nil {
		return left.Entries[0].Key
	}
	return
}

// LeftValue returns the left-most value or nil if tree is empty.
func (tree *{{.TypeName}}) LeftValue() (result {{.ValueType}}) {
	if left := tree.Left(); left != nil {
		return left.Entries[0].Value
	}
	return
}

// Right returns the right-most (max) node or nil if tree is empty.
func (tree *{{.TypeName}}) Right() *{{.TypeName}}Node {
	return tree.right(tree.Root)
}

// RightKey returns the right-most (max) key or nil if tree is empty.
func (tree *{{.TypeName}}) RightKey() (result {{.KeyType}}) {
	if right := tree.Right(); right != nil {
		return right.Entries[len(right.Entries)-1].Key
	}
	return
}

// RightValue returns the right-most value or nil if tree is empty.
func (tree *{{.TypeName}}) RightValue() (result {{.ValueType}}) {
	if right := tree.Right(); right != nil {
		return right.Entries[len(right.Entries)-1].Value
	}
	return
}

// String returns a string representation of container (for debugging purposes)
func (tree *{{.TypeName}}) String() string {
	var buffer bytes.Buffer
	if _, err := buffer.WriteString("BTree\n"); err != nil {
	}
	if !tree.Empty() {
		tree.output(&buffer, tree.Root, 0, true)
	}
	return buffer.String()
}

func (entry *{{.TypeName}}Entry) String() string {
	return fmt.Sprintf("%v", entry.Key)
}

func (tree *{{.TypeName}}) output(buffer *bytes.Buffer, node *{{.TypeName}}Node, level int, isTail bool) {
	for e := 0; e < len(node.Entries)+1; e++ {
		if e < len(node.Children) {
			tree.output(buffer, node.Children[e], level+1, true)
		}
		if e < len(node.Entries) {
			if _, err := buffer.WriteString(strings.Repeat("    ", level)); err != nil {
			}
			if _, err := buffer.WriteString(fmt.Sprintf("%v", node.Entries[e].Key) + "\n"); err != nil {
			}
		}
	}
}

func (node *{{.TypeName}}Node) height() int {
	height := 0
	for ; node != nil; node = node.Children[0] {
		height++
		if len(node.Children) == 0 {
			break
		}
	}
	return height
}

func (tree *{{.TypeName}}) isLeaf(node *{{.TypeName}}Node) bool {
	return len(node.Children) == 0
}

func (tree *{{.TypeName}}) isFull(node *{{.TypeName}}Node) bool {
	return len(node.Entries) == tree.maxEntries()
}

func (tree *{{.TypeName}}) shouldSplit(node *{{.TypeName}}Node) bool {
	return len(node.Entries) > tree.maxEntries()
}

func (tree *{{.TypeName}}) maxChildren() int {
	return tree.m
}

func (tree *{{.TypeName}}) minChildren() int {
	return (tree.m + 1) / 2 // ceil(m/2)
}

func (tree *{{.TypeName}}) maxEntries() int {
	return tree.maxChildren() - 1
}

func (tree *{{.TypeName}}) minEntries() int {
	return tree.minChildren() - 1
}

func (tree *{{.TypeName}}) middle() int {
	return (tree.m - 1) / 2 // "-1" to favor right nodes to have more keys when splitting
}

// search searches only within the single node among its entries
func (tree *{{.TypeName}}) search(node *{{.TypeName}}Node, key {{.KeyType}}) (index int, found bool) {
	low, high := 0, len(node.Entries)-1
	var mid int
	for low <= high {
		mid = (high + low) / 2
    {{- if .IsKeyNum}}
        compare := key - node.Entries[mid].Key
    {{- else if .Comparator}}
        compare := key.Cmp(node.Entries[mid].Key)
    {{- else}}
        var compare int
        switch {
        case key > node.Entries[mid].Key:
            compare = 1
        case key < node.Entries[mid].Key:
            compare = -1
        default:
            compare = 0
        }
    {{- end}}
		switch {
		case compare > 0:
			low = mid + 1
		case compare < 0:
			high = mid - 1
		case compare == 0:
			return mid, true
		}
	}
	return low, false
}

// searchRecursively searches recursively down the tree starting at the startNode
func (tree *{{.TypeName}}) searchRecursively(startNode *{{.TypeName}}Node, key {{.KeyType}}) (node *{{.TypeName}}Node, index int, found bool) {
	if tree.Empty() {
		return nil, -1, false
	}
	node = startNode
	for {
		index, found = tree.search(node, key)
		if found {
			return node, index, true
		}
		if tree.isLeaf(node) {
			return nil, -1, false
		}
		node = node.Children[index]
	}
}

func (tree *{{.TypeName}}) insert(node *{{.TypeName}}Node, entry *{{.TypeName}}Entry) (inserted bool) {
	if tree.isLeaf(node) {
		return tree.insertIntoLeaf(node, entry)
	}
	return tree.insertIntoInternal(node, entry)
}

func (tree *{{.TypeName}}) insertIntoLeaf(node *{{.TypeName}}Node, entry *{{.TypeName}}Entry) (inserted bool) {
	insertPosition, found := tree.search(node, entry.Key)
	if found {
		node.Entries[insertPosition] = entry
		return false
	}
	// Insert entry's key in the middle of the node
	node.Entries = append(node.Entries, nil)
	copy(node.Entries[insertPosition+1:], node.Entries[insertPosition:])
	node.Entries[insertPosition] = entry
	tree.split(node)
	return true
}

func (tree *{{.TypeName}}) insertIntoInternal(node *{{.TypeName}}Node, entry *{{.TypeName}}Entry) (inserted bool) {
	insertPosition, found := tree.search(node, entry.Key)
	if found {
		node.Entries[insertPosition] = entry
		return false
	}
	return tree.insert(node.Children[insertPosition], entry)
}

func (tree *{{.TypeName}}) split(node *{{.TypeName}}Node) {
	if !tree.shouldSplit(node) {
		return
	}

	if node == tree.Root {
		tree.splitRoot()
		return
	}

	tree.splitNonRoot(node)
}

func (tree *{{.TypeName}}) splitNonRoot(node *{{.TypeName}}Node) {
	middle := tree.middle()
	parent := node.Parent

	left := &{{.TypeName}}Node{Entries: append([]*{{.TypeName}}Entry(nil), node.Entries[:middle]...), Parent: parent}
	right := &{{.TypeName}}Node{Entries: append([]*{{.TypeName}}Entry(nil), node.Entries[middle+1:]...), Parent: parent}

	// Move children from the node to be split into left and right nodes
	if !tree.isLeaf(node) {
		left.Children = append([]*{{.TypeName}}Node(nil), node.Children[:middle+1]...)
		right.Children = append([]*{{.TypeName}}Node(nil), node.Children[middle+1:]...)
		setParent(left.Children, left)
		setParent(right.Children, right)
	}

	insertPosition, _ := tree.search(parent, node.Entries[middle].Key)

	// Insert middle key into parent
	parent.Entries = append(parent.Entries, nil)
	copy(parent.Entries[insertPosition+1:], parent.Entries[insertPosition:])
	parent.Entries[insertPosition] = node.Entries[middle]

	// Set child left of inserted key in parent to the created left node
	parent.Children[insertPosition] = left

	// Set child right of inserted key in parent to the created right node
	parent.Children = append(parent.Children, nil)
	copy(parent.Children[insertPosition+2:], parent.Children[insertPosition+1:])
	parent.Children[insertPosition+1] = right

	tree.split(parent)
}

func (tree *{{.TypeName}}) splitRoot() {
	middle := tree.middle()

	left := &{{.TypeName}}Node{Entries: append([]*{{.TypeName}}Entry(nil), tree.Root.Entries[:middle]...)}
	right := &{{.TypeName}}Node{Entries: append([]*{{.TypeName}}Entry(nil), tree.Root.Entries[middle+1:]...)}

	// Move children from the node to be split into left and right nodes
	if !tree.isLeaf(tree.Root) {
		left.Children = append([]*{{.TypeName}}Node(nil), tree.Root.Children[:middle+1]...)
		right.Children = append([]*{{.TypeName}}Node(nil), tree.Root.Children[middle+1:]...)
		setParent(left.Children, left)
		setParent(right.Children, right)
	}

	// Root is a node with one entry and two children (left and right)
	newRoot := &{{.TypeName}}Node{
		Entries:  []*{{.TypeName}}Entry{tree.Root.Entries[middle]},
		Children: []*{{.TypeName}}Node{left, right},
	}

	left.Parent = newRoot
	right.Parent = newRoot
	tree.Root = newRoot
}

func setParent(nodes []*{{.TypeName}}Node, parent *{{.TypeName}}Node) {
	for _, node := range nodes {
		node.Parent = parent
	}
}

func (tree *{{.TypeName}}) left(node *{{.TypeName}}Node) *{{.TypeName}}Node {
	if tree.Empty() {
		return nil
	}
	current := node
	for {
		if tree.isLeaf(current) {
			return current
		}
		current = current.Children[0]
	}
}

func (tree *{{.TypeName}}) right(node *{{.TypeName}}Node) *{{.TypeName}}Node {
	if tree.Empty() {
		return nil
	}
	current := node
	for {
		if tree.isLeaf(current) {
			return current
		}
		current = current.Children[len(current.Children)-1]
	}
}

// leftSibling returns the node's left sibling and child index (in parent) if it exists, otherwise (nil,-1)
// key is any of keys in node (could even be deleted).
func (tree *{{.TypeName}}) leftSibling(node *{{.TypeName}}Node, key {{.KeyType}}) (*{{.TypeName}}Node, int) {
	if node.Parent != nil {
		index, _ := tree.search(node.Parent, key)
		index--
		if index >= 0 && index < len(node.Parent.Children) {
			return node.Parent.Children[index], index
		}
	}
	return nil, -1
}

// rightSibling returns the node's right sibling and child index (in parent) if it exists, otherwise (nil,-1)
// key is any of keys in node (could even be deleted).
func (tree *{{.TypeName}}) rightSibling(node *{{.TypeName}}Node, key {{.KeyType}}) (*{{.TypeName}}Node, int) {
	if node.Parent != nil {
		index, _ := tree.search(node.Parent, key)
		index++
		if index < len(node.Parent.Children) {
			return node.Parent.Children[index], index
		}
	}
	return nil, -1
}

// delete deletes an entry in node at entries' index
// ref.: https://en.wikipedia.org/wiki/B-tree#Deletion
func (tree *{{.TypeName}}) delete(node *{{.TypeName}}Node, index int) {
	// deleting from a leaf node
	if tree.isLeaf(node) {
		deletedKey := node.Entries[index].Key
		tree.deleteEntry(node, index)
		tree.rebalance(node, deletedKey)
		if len(tree.Root.Entries) == 0 {
			tree.Root = nil
		}
		return
	}

	// deleting from an internal node
	leftLargestNode := tree.right(node.Children[index]) // largest node in the left sub-tree (assumed to exist)
	leftLargestEntryIndex := len(leftLargestNode.Entries) - 1
	node.Entries[index] = leftLargestNode.Entries[leftLargestEntryIndex]
	deletedKey := leftLargestNode.Entries[leftLargestEntryIndex].Key
	tree.deleteEntry(leftLargestNode, leftLargestEntryIndex)
	tree.rebalance(leftLargestNode, deletedKey)
}

// rebalance rebalances the tree after deletion if necessary and returns true, otherwise false.
// Note that we first delete the entry and then call rebalance, thus the passed deleted key as reference.
func (tree *{{.TypeName}}) rebalance(node *{{.TypeName}}Node, deletedKey {{.KeyType}}) {
	// check if rebalancing is needed
	if node == nil || len(node.Entries) >= tree.minEntries() {
		return
	}

	// try to borrow from left sibling
	leftSibling, leftSiblingIndex := tree.leftSibling(node, deletedKey)
	if leftSibling != nil && len(leftSibling.Entries) > tree.minEntries() {
		// rotate right
		node.Entries = append([]*{{.TypeName}}Entry{node.Parent.Entries[leftSiblingIndex]}, node.Entries...) // prepend parent's separator entry to node's entries
		node.Parent.Entries[leftSiblingIndex] = leftSibling.Entries[len(leftSibling.Entries)-1]
		tree.deleteEntry(leftSibling, len(leftSibling.Entries)-1)
		if !tree.isLeaf(leftSibling) {
			leftSiblingRightMostChild := leftSibling.Children[len(leftSibling.Children)-1]
			leftSiblingRightMostChild.Parent = node
			node.Children = append([]*{{.TypeName}}Node{leftSiblingRightMostChild}, node.Children...)
			tree.deleteChild(leftSibling, len(leftSibling.Children)-1)
		}
		return
	}

	// try to borrow from right sibling
	rightSibling, rightSiblingIndex := tree.rightSibling(node, deletedKey)
	if rightSibling != nil && len(rightSibling.Entries) > tree.minEntries() {
		// rotate left
		node.Entries = append(node.Entries, node.Parent.Entries[rightSiblingIndex-1]) // append parent's separator entry to node's entries
		node.Parent.Entries[rightSiblingIndex-1] = rightSibling.Entries[0]
		tree.deleteEntry(rightSibling, 0)
		if !tree.isLeaf(rightSibling) {
			rightSiblingLeftMostChild := rightSibling.Children[0]
			rightSiblingLeftMostChild.Parent = node
			node.Children = append(node.Children, rightSiblingLeftMostChild)
			tree.deleteChild(rightSibling, 0)
		}
		return
	}

	// merge with siblings
	if rightSibling != nil {
		// merge with right sibling
		node.Entries = append(node.Entries, node.Parent.Entries[rightSiblingIndex-1])
		node.Entries = append(node.Entries, rightSibling.Entries...)
		deletedKey = node.Parent.Entries[rightSiblingIndex-1].Key
		tree.deleteEntry(node.Parent, rightSiblingIndex-1)
		tree.appendChildren(node.Parent.Children[rightSiblingIndex], node)
		tree.deleteChild(node.Parent, rightSiblingIndex)
	} else if leftSibling != nil {
		// merge with left sibling
		entries := append([]*{{.TypeName}}Entry(nil), leftSibling.Entries...)
		entries = append(entries, node.Parent.Entries[leftSiblingIndex])
		node.Entries = append(entries, node.Entries...)
		deletedKey = node.Parent.Entries[leftSiblingIndex].Key
		tree.deleteEntry(node.Parent, leftSiblingIndex)
		tree.prependChildren(node.Parent.Children[leftSiblingIndex], node)
		tree.deleteChild(node.Parent, leftSiblingIndex)
	}

	// make the merged node the root if its parent was the root and the root is empty
	if node.Parent == tree.Root && len(tree.Root.Entries) == 0 {
		tree.Root = node
		node.Parent = nil
		return
	}

	// parent might underflow, so try to rebalance if necessary
	tree.rebalance(node.Parent, deletedKey)
}

func (tree *{{.TypeName}}) prependChildren(fromNode *{{.TypeName}}Node, toNode *{{.TypeName}}Node) {
	children := append([]*{{.TypeName}}Node(nil), fromNode.Children...)
	toNode.Children = append(children, toNode.Children...)
	setParent(fromNode.Children, toNode)
}

func (tree *{{.TypeName}}) appendChildren(fromNode *{{.TypeName}}Node, toNode *{{.TypeName}}Node) {
	toNode.Children = append(toNode.Children, fromNode.Children...)
	setParent(fromNode.Children, toNode)
}

func (tree *{{.TypeName}}) deleteEntry(node *{{.TypeName}}Node, index int) {
	copy(node.Entries[index:], node.Entries[index+1:])
	node.Entries[len(node.Entries)-1] = nil
	node.Entries = node.Entries[:len(node.Entries)-1]
}

func (tree *{{.TypeName}}) deleteChild(node *{{.TypeName}}Node, index int) {
	if index >= len(node.Children) {
		return
	}
	copy(node.Children[index:], node.Children[index+1:])
	node.Children[len(node.Children)-1] = nil
	node.Children = node.Children[:len(node.Children)-1]
}

// Copyright (c) 2015, Emir Pasic. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
// Adapted for code-generation by reddec, 2019

// Iterator holding the iterator's state
type {{.TypeName}}Iterator struct {
	tree     *{{.TypeName}}
	node     *{{.TypeName}}Node
	entry    *{{.TypeName}}Entry
	position byte // begin, between, end = 0, 1, 2
}


// Iterator returns a stateful iterator whose elements are key/value pairs.
func (tree *{{.TypeName}}) Iterator() {{.TypeName}}Iterator {
	return {{.TypeName}}Iterator{tree: tree, node: nil, position: 0}
}

// Next moves the iterator to the next element and returns true if there was a next element in the container.
// If Next() returns true, then next element's key and value can be retrieved by Key() and Value().
// If Next() was called for the first time, then it will point the iterator to the first element if it exists.
// Modifies the state of the iterator.
func (iterator *{{.TypeName}}Iterator) Next() bool {
	// If already at end, go to end
	if iterator.position == 2 {
		goto end
	}
	// If at beginning, get the left-most entry in the tree
	if iterator.position == 0 {
		left := iterator.tree.Left()
		if left == nil {
			goto end
		}
		iterator.node = left
		iterator.entry = left.Entries[0]
		goto between
	}
	{
		// Find current entry position in current node
		e, _ := iterator.tree.search(iterator.node, iterator.entry.Key)
		// Try to go down to the child right of the current entry
		if e+1 < len(iterator.node.Children) {
			iterator.node = iterator.node.Children[e+1]
			// Try to go down to the child left of the current node
			for len(iterator.node.Children) > 0 {
				iterator.node = iterator.node.Children[0]
			}
			// Return the left-most entry
			iterator.entry = iterator.node.Entries[0]
			goto between
		}
		// Above assures that we have reached a leaf node, so return the next entry in current node (if any)
		if e+1 < len(iterator.node.Entries) {
			iterator.entry = iterator.node.Entries[e+1]
			goto between
		}
	}
	// Reached leaf node and there are no entries to the right of the current entry, so go up to the parent
	for iterator.node.Parent != nil {
		iterator.node = iterator.node.Parent
		// Find next entry position in current node (note: search returns the first equal or bigger than entry)
		e, _ := iterator.tree.search(iterator.node, iterator.entry.Key)
		// Check that there is a next entry position in current node
		if e < len(iterator.node.Entries) {
			iterator.entry = iterator.node.Entries[e]
			goto between
		}
	}

end:
	iterator.End()
	return false

between:
	iterator.position = 1
	return true
}

// Prev moves the iterator to the previous element and returns true if there was a previous element in the container.
// If Prev() returns true, then previous element's key and value can be retrieved by Key() and Value().
// Modifies the state of the iterator.
func (iterator *{{.TypeName}}Iterator) Prev() bool {
	// If already at beginning, go to begin
	if iterator.position == 0 {
		goto begin
	}
	// If at end, get the right-most entry in the tree
	if iterator.position == 2 {
		right := iterator.tree.Right()
		if right == nil {
			goto begin
		}
		iterator.node = right
		iterator.entry = right.Entries[len(right.Entries)-1]
		goto between
	}
	{
		// Find current entry position in current node
		e, _ := iterator.tree.search(iterator.node, iterator.entry.Key)
		// Try to go down to the child left of the current entry
		if e < len(iterator.node.Children) {
			iterator.node = iterator.node.Children[e]
			// Try to go down to the child right of the current node
			for len(iterator.node.Children) > 0 {
				iterator.node = iterator.node.Children[len(iterator.node.Children)-1]
			}
			// Return the right-most entry
			iterator.entry = iterator.node.Entries[len(iterator.node.Entries)-1]
			goto between
		}
		// Above assures that we have reached a leaf node, so return the previous entry in current node (if any)
		if e-1 >= 0 {
			iterator.entry = iterator.node.Entries[e-1]
			goto between
		}
	}
	// Reached leaf node and there are no entries to the left of the current entry, so go up to the parent
	for iterator.node.Parent != nil {
		iterator.node = iterator.node.Parent
		// Find previous entry position in current node (note: search returns the first equal or bigger than entry)
		e, _ := iterator.tree.search(iterator.node, iterator.entry.Key)
		// Check that there is a previous entry position in current node
		if e-1 >= 0 {
			iterator.entry = iterator.node.Entries[e-1]
			goto between
		}
	}

begin:
	iterator.Begin()
	return false

between:
	iterator.position = 1
	return true
}

// Value returns the current element's value.
// Does not modify the state of the iterator.
func (iterator *{{.TypeName}}Iterator) Value() {{.ValueType}} {
	return iterator.entry.Value
}

// Key returns the current element's key.
// Does not modify the state of the iterator.
func (iterator *{{.TypeName}}Iterator) Key() {{.KeyType}} {
	return iterator.entry.Key
}

// Begin resets the iterator to its initial state (one-before-first)
// Call Next() to fetch the first element if any.
func (iterator *{{.TypeName}}Iterator) Begin() {
	iterator.node = nil
	iterator.position = 0
	iterator.entry = nil
}

// End moves the iterator past the last element (one-past-the-end).
// Call Prev() to fetch the last element if any.
func (iterator *{{.TypeName}}Iterator) End() {
	iterator.node = nil
	iterator.position = 2
	iterator.entry = nil
}

// First moves the iterator to the first element and returns true if there was a first element in the container.
// If First() returns true, then first element's key and value can be retrieved by Key() and Value().
// Modifies the state of the iterator
func (iterator *{{.TypeName}}Iterator) First() bool {
	iterator.Begin()
	return iterator.Next()
}

// Last moves the iterator to the last element and returns true if there was a last element in the container.
// If Last() returns true, then last element's key and value can be retrieved by Key() and Value().
// Modifies the state of the iterator.
func (iterator *{{.TypeName}}Iterator) Last() bool {
	iterator.End()
	return iterator.Prev()
}